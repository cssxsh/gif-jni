name: "build"
on: [ push, pull_request ]

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: nightly

      - name: Install LLVM
        run: choco install llvm

      - name: Install Rust Target
        shell: bash
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Build Windows X64
        shell: bash
        run: |
          cargo build --package gif-jni --lib --release --target x86_64-pc-windows-msvc

      - name: Rename Library File Name
        shell: bash
        run: |
          mkdir library
          cp target/x86_64-pc-windows-msvc/release/gif_jni.dll library/gif-windows-x64.dll
          sha256sum library/gif-windows-x64.dll | awk '{ print $1 }' > library/gif-windows-x64.dll.sha256

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: push-build
          path: library/*

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: library/*

  linux-build:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: nightly

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0.1"

      - name: Install Rust X64 Target
        shell: bash
        run: |
          rustup target add x86_64-unknown-linux-gnu
          sudo apt-get update

      - name: Install Rust AARCH64 Target
        shell: bash
        run: |
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get install -y -qq gcc-aarch64-linux-gnu:amd64 g++-aarch64-linux-gnu:amd64
          wget http://ports.ubuntu.com/pool/main/f/fontconfig/libfontconfig1-dev_2.13.1-2ubuntu3_arm64.deb
          wget http://ports.ubuntu.com/pool/main/f/freetype/libfreetype-dev_2.10.1-2_arm64.deb
          wget http://ports.ubuntu.com/pool/main/e/expat/libexpat1-dev_2.2.9-1build1_arm64.deb
          wget http://ports.ubuntu.com/pool/main/u/util-linux/libblkid-dev_2.34-0.1ubuntu9_arm64.deb
          dpkg -X libfontconfig1-dev_*_arm64.deb aarch64
          dpkg -X libfreetype-dev_*_arm64.deb aarch64
          dpkg -X libexpat1-dev_*_arm64.deb aarch64
          dpkg -X libblkid-dev_*_arm64.deb aarch64
          sudo cp -r aarch64/usr/lib/aarch64-linux-gnu/*.a /usr/lib/aarch64-linux-gnu/
          ls -l /usr/lib/aarch64-linux-gnu

#      - name: Install Rust PPC64EL Target
#        shell: bash
#        run: |
#          rustup target add powerpc64le-unknown-linux-gnu
#          sudo apt-get install -y -qq gcc-powerpc64le-linux-gnu:amd64 g++-powerpc64le-linux-gnu:amd64
#          wget http://ports.ubuntu.com/pool/main/f/fontconfig/libfontconfig1-dev_2.13.1-2ubuntu3_ppc64el.deb
#          wget http://ports.ubuntu.com/pool/main/f/freetype/libfreetype-dev_2.10.1-2ubuntu0.2_ppc64el.deb
#          dpkg -X libfontconfig1-dev*ppc64el.deb ppc64el
#          dpkg -X libfreetype-dev*ppc64el.deb ppc64el
#          sudo cp -r ppc64el/usr/lib/powerpc64le-linux-gnu/*.a /usr/lib/powerpc64le-linux-gnu/
#          ls -l /usr/lib/powerpc64le-linux-gnu

      - name: Build Linux X64
        shell: bash
        run: |
          cargo build --package gif-jni --lib --release --target x86_64-unknown-linux-gnu

      - name: Build Linux AARCH64
        shell: bash
        run: |
          cargo build --package gif-jni --lib --release --target aarch64-unknown-linux-gnu
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

#      - name: Build Linux PPC64EL
#        shell: bash
#        run: |
#          cargo build --package gif-jni --lib --release --target powerpc64le-unknown-linux-gnu
#        env:
#          CARGO_TARGET_POWERPC64LE_UNKNOWN_LINUX_GNU_LINKER: powerpc64le-linux-gnu-gcc

      - name: Rename Library File Name
        shell: bash
        run: |
          mkdir library
          cp target/x86_64-unknown-linux-gnu/release/libgif_jni.so library/libgif-linux-x64.so
          sha256sum library/libgif-linux-x64.so | awk '{ print $1 }' > library/libgif-linux-x64.so.sha256
          cp target/aarch64-unknown-linux-gnu/release/libgif_jni.so library/libgif-linux-arm64.so
          sha256sum library/libgif-linux-arm64.so | awk '{ print $1 }' > library/libgif-linux-arm64.so.sha256
#          cp target/powerpc64le-unknown-linux-gnu/release/libgif_jni.so library/libgif-linux-ppc64el.so
#          sha256sum library/libgif-linux-ppc64el.so | awk '{ print $1 }' > library/libgif-linux-ppc64el.so.sha256

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: push-build
          path: library/*

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: library/*

  android-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: nightly

      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "13.0.1"

      - name: Install Rust Target
        shell: bash
        run: |
          rustup target add x86_64-linux-android
          rustup target add aarch64-linux-android

      - name: Install Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b

      - name: Set Android NDK ToolChains Path
        shell: bash
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin >> $GITHUB_PATH

      - name: Build Android X64
        shell: bash
        run: |
          cargo build --package gif-jni --lib --release --target x86_64-linux-android
        env:
          CC_X86_64_LINUX_ANDROID: x86_64-linux-android26-clang
          CXX_X86_64_LINUX_ANDROID: x86_64-linux-android26-clang++
          CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER: x86_64-linux-android26-clang

      - name: Build Android ARM64
        shell: bash
        run: |
          cargo build --package gif-jni --lib --release --target aarch64-linux-android
        env:
          CC_AARCH64_LINUX_ANDROID: aarch64-linux-android26-clang
          CXX_AARCH64_LINUX_ANDROID: aarch64-linux-android26-clang++
          CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER: aarch64-linux-android26-clang

      - name: Rename Library File Name
        shell: bash
        run: |
          mkdir library
          cp target/x86_64-linux-android/release/libgif_jni.so library/libgif-android-x64.so
          sha256sum library/libgif-android-x64.so | awk '{ print $1 }' > library/libgif-android-x64.so.sha256
          cp target/aarch64-linux-android/release/libgif_jni.so library/libgif-android-arm64.so
          sha256sum library/libgif-android-arm64.so | awk '{ print $1 }' > library/libgif-android-arm64.so.sha256

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: push-build
          path: library/*

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: library/*

  macos-build:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: nightly

      - name: Install Rust Target
        shell: bash
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Build MacOS ARM64
        shell: bash
        run: |
          cargo build --package gif-jni --lib --release --target aarch64-apple-darwin

      - name: Build MacOS X64
        shell: bash
        run: |
          cargo build --package gif-jni --lib --release --target x86_64-apple-darwin

      - name: Rename Library File Name
        shell: bash
        run: |
          mkdir library
          cp target/x86_64-apple-darwin/release/libgif_jni.dylib library/libgif-macos-x64.dylib
          shasum -a 256 library/libgif-macos-x64.dylib | awk '{ print $1 }' > library/libgif-macos-x64.dylib.sha256
          cp target/aarch64-apple-darwin/release/libgif_jni.dylib library/libgif-macos-arm64.dylib
          shasum -a 256 library/libgif-macos-arm64.dylib | awk '{ print $1 }' > library/libgif-macos-arm64.dylib.sha256

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: push-build
          path: library/*

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: library/*

